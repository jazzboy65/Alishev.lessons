package AdvancedJava.ReflectionApi; //Урок 37. Рефлексия часть 1

/**
 * Все классы можно рассматривать как экземпляры(объекты) класса Class.
 * Все инструменты ООП можно применять к классам как к сущностям
 * (Рассматривая класс как объект класса Class и работать с ним как
 * с обычнм объектом в Java) == это и есть РЕФЛЕКСИЯ
 *
 * Класс Class - это служебный класс, экземпляры которого (Java классы) хранят
 * конкретную информацию о конкретном классе.
 *
 * class Class {
 *     String name;
 *     String packageName;
 *     List<Attribute> attributes;
 *     List<Method> methods;
 *     ...
 * }
 *
 * Получение доступа к объекту класса Class:
 * 1)Классу (например MyClass) - Class c = MyClass.class;
 *
 * 2)Объекту (пусть obj - экземпляр класса MyClass) -
 * Class c = obj.gecClass();
 *
 * 3)Названию класса (полное имя класса "ru.alex.MyClass"):
 * Class c = Class.forName("ru.alex.MyClass");
 *
 * Method - это тоже класс.
 * Методы, которые мы объявляем в классе - это экземпляры(объекты) класса Method
 *
 * Field - это тоже класс
 * Поля, которые мы объявляем в классе - это экземпляры(объекты) класса Field
 *
 * Рефлексия учитывает инкапсуляцию, поэтому будут возвращены только public поля
 *
 * Рефлексия может не учитывать инкапсуляцию, тогда будут возвращены все поля
 * (даже private). Делается это с помощью методов, которые имеют Declared в названии
 *
 * Это используется в Spring Framework для аннотации @Autowired
 * Также можно проверять анотирован ли класс определенной аннотацией
 *
 */

public class Reflection1 {
}
